name: Docker Build, Push, e Kubernetes Deploy
on:
    push:
        branches: [main]

jobs:
    build:
        runs-on: ubuntu-latest
        
        steps:

        - uses: actions/checkout@v2

        - name: Docker meta
          id: docker_meta
          uses: crazy-max/ghaction-docker-meta@v1
          with:
            images: davicarneiro/app-web-teste
            tag-sha: true

        - name: QEMU
          uses: docker/setup-qemu-action@v1

        - name: Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to Dockerhub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME}}
            password: ${{ secrets.DOCKERHUB_TOKEN}}

        - name: Bump version and push tag
          id: tagging
          uses: davicarnneiro/github-tag-action@v4.5
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}

        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            push: true
            context: .
            file: ./Dockerfile
            platforms: linux/amd64,linux/arm64,linux/386
            tags: davicarneiro/app-web:${{ steps.tagging.outputs.new_version }}
        
    deploy-to-kubernetes:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout Código
        uses: actions/checkout@v2

      - name: Configurar AWS CLI
        run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Configurar Kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name imersao-eks

      - name: Aplicar Configurações do Kubernetes
        run: kubectl apply -f ./k8s/deployment.yaml






# name: CI/CD para ECR e Kubernetes

# on:
#   push:
#     branches:
#       - main # Troque para a branch que deseja usar

# jobs:
#   build:
#     name: Build e Push no ECR
#     runs-on: ubuntu-latest

#     steps:
#     - name: Verificar código
#       uses: actions/checkout@v2

#     - name: Login no Amazon ECR
#       id: login-ecr
#       run: |
#         echo ${{ secrets.AWS_ACCESS_KEY_ID }} | aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_REGION: ${{ secrets.AWS_REGION }}
#         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

#     - name: Verificar imagem no ECR
#       id: check-ecr-image
#       run: |
#         IMAGE_NAME="latest"  # Substitua pelo nome da sua imagem
#         REGION="us-west-1"    # Substitua pela região do seu ECR

#         # Verificar se a imagem já existe no ECR
#         if aws ecr describe-images --repository-name latest --region ${{ secrets.AWS_REGION }} | grep -q "imageDigest"; then
#           echo "A imagem já existe no ECR."
#           echo "Você pode adicionar comandos adicionais aqui, se necessário."
#           exit 0  # Não interrompe o fluxo
#         else
#           echo "A imagem não existe no ECR. Continuando com a construção e envio."
#         fi
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}


#     - name: Build da imagem Docker
#       run: |
#         docker build -t web-app-repo .
#         docker tag web-app-repo:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/web-app-repo:latest
#       working-directory: ./src


#     - name: Push da imagem para o ECR
#       run: |
#         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/web-app-repo:latest
#       working-directory: ./src


#     - name: Configurar as credenciais da AWS
#       run: |
#         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws configure set default.region ${{ secrets.AWS_REGION }}          

#     - name: Fazer o deploy no Kubernetes
#       run: |
#         aws eks --region us-west-1 update-kubeconfig --name devops-eks
#         kubectl apply -f ./k8s/deployment.yaml


#   # deploy:
#   #   - name: Deploy no Kubernetes
#   #     needs: build
#   #     runs-on: ubuntu-latest

#   # steps:
#   #   - name: Instalar o AWS CLI
#   #     run: |
#   #       sudo apt-get update
#   #       sudo apt-get install -y awscli

#   #   - name: Configurar as credenciais da AWS
#   #     run: |
#   #       aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#   #       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   #       aws configure set default.region ${{ secrets.AWS_REGION }}
#   #       env:
#   #         KUBECONFIG: ${{ runner.workspace }}/kubeconfig
          

#   #   - name: Fazer o deploy no Kubernetes
#   #     run: |
#   #       aws eks --region us-west-1 update-kubeconfig --name phibro-testes-eks
#   #       kubectl apply -f ./Projetos/web-app-aws/k8s/deployment.yaml